#include <iostream>

using namespace std;

void movepeca(string[4][4], string, string, string*, string*, string*, bool);
void verificaVitoria(string[4][4], string*, string*, bool*);

int main() {
    string tabuleiro[4][4];
    string letrasTb[] = {"10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25"};
    string j1[] = {"a1", "b1", "c1", "d1"};
    string j2[] = {"a2", "b2", "c2", "d2"};
    string pos, peca, msg;
    bool jogo = true;
    bool vezJogador = true;
    bool vitoria = false;
    
    tabuleiro[0][0] = j2[0];
    tabuleiro[0][1] = j2[1];
    tabuleiro[0][2] = j2[2];
    tabuleiro[0][3] = j2[3];
    
    tabuleiro[1][0] = letrasTb[4];
    tabuleiro[1][1] = letrasTb[5];
    tabuleiro[1][2] = letrasTb[6];
    tabuleiro[1][3] = letrasTb[7];
    
    tabuleiro[2][0] = letrasTb[8];
    tabuleiro[2][1] = letrasTb[9];
    tabuleiro[2][2] = letrasTb[10];
    tabuleiro[2][3] = letrasTb[11];
    
    tabuleiro[3][0] = j1[0];
    tabuleiro[3][1] = j1[1];
    tabuleiro[3][2] = j1[2];
    tabuleiro[3][3] = j1[3];
    
    for(int l = 0; l < 4; l++) {
        for(int c = 0; c < 4; c++) {
            cout << tabuleiro[l][c] << " ";
        }
        cout << "\n";
    }
    
    cout << "\n";
    
    while(jogo) {
        cout << "Vez do jogador " << (vezJogador ? "1" : "2") << endl;
        cout << "Qual peça você deseja mover? ";
        cin >> peca;
        cout << "Para qual posição você deseja mover a peça? ";
        cin >> pos;
        movepeca(tabuleiro, peca, pos, letrasTb, j1, j2, vezJogador);
        verificaVitoria(tabuleiro, j1, j2, &vitoria);
        for(int l = 0; l < 4; l++) {
            for(int c = 0; c < 4; c++) {
                cout << tabuleiro[l][c] << " ";
            }
            cout << "\n";
        }
        if(vitoria) {
            msg = "O vencedor foi o jogador ", (vezJogador ? "1" : "2");
            jogo = false;
        }
        vezJogador = !vezJogador;
    }
    
    cout << msg << endl;
    
    return 0;
}

void movepeca(string t[4][4], string peca, string pos, string *lTb, string *j1, string *j2, bool vJ) {
    int vPeca=1, vPos=1, linePeca, colPeca, linePos, colPos;
    bool confirm = true;
    
    for(int l = 0; l < 4; l++) {
        for(int c = 0; c < 4; c++) {
            if(t[l][c] == peca) {
                linePeca = l;
                colPeca = c;
                break;
            }
            vPeca++;
        }
    }
    
    for(int l = 0; l < 4; l++) {
        for(int c = 0; c < 4; c++) {
            if(t[l][c] == pos) {
                linePos = l;
                colPos = c;
                break;
            }
            vPos++;
        }
    }
    
    for(int l = 0; l < 4; l++) {
        for(int c = 0; c < 4; c++) {
            for(int i = 0; i < 4; i++) {
                if(j1[i] == pos) {
                    confirm = false;
                    break;
                }
                
                if(j2[i] == pos) {
                    confirm = false;
                    break;
                }
            }
        }
    }
    
    if(confirm) {
        if(vJ) {
            if(t[linePeca-1][colPeca+1] == pos || t[linePeca-1][colPeca-1] == pos) {
                t[linePeca][colPeca] = lTb[vPeca-1];
                t[linePos][colPos] = peca;
            } else if(t[linePeca-2][colPeca-2] == pos) {
                for(int i = 0; i < 4; i++) {
                    if(t[linePeca-1][colPeca-1] == j2[i]) {
                        t[linePeca][linePeca] = lTb[vPeca-1];
                        t[linePos][colPos] = peca;
                        t[linePeca-1][colPeca-1] = lTb[vPeca-6];       
                    }
                }
            } else if(t[linePeca-2][colPeca+2] == pos) {
                for(int i = 0; i < 4; i++) {
                    if(t[linePeca-1][linePeca+1] == j2[i]) {
                        t[linePeca][colPeca] = lTb[vPeca-1];
                        t[linePos][colPos] = peca;
                        t[linePeca-1][linePeca+1] = lTb[vPeca-4];       
                    }
                }
            }
        } else {
            if(t[linePeca+1][colPeca+1] == pos || t[linePeca+1][colPeca-1] == pos) {
                t[linePeca][colPeca] = lTb[vPeca-1];
                t[linePos][colPos] = peca; 
            } else if(t[linePeca+2][colPeca+2] == pos) {
                for(int i = 0; i < 4; i++) {
                    if(t[linePeca+1][colPeca+1] == j1[i]) {
                        t[linePeca][colPeca] = lTb[vPeca-1];
                        t[linePos][colPos] = peca;
                        t[linePeca+1][colPeca+1] = lTb[vPeca+4];       
                    }
                }
            } else if(t[linePeca+2][colPeca-2] == pos) {
                for(int i = 0; i < 4; i++) {
                    if(t[linePeca+1][linePeca-1] == j1[i]) {
                        t[linePeca][colPeca] = lTb[vPeca-1];
                        t[linePos][colPos] = peca;
                        t[linePeca+1][linePeca-1] = lTb[vPeca+2];
                    }
                }
            }
        }
    }
}

void verificaVitoria(string t[4][4], string *j1, string *j2, bool* v) {
    int v1=0, v2=0;
    
    for(int l = 0; l < 4; l++) {
        for(int c = 0; c < 4; c++) {
            for(int i = 0; i < 4; i++) {
                if(t[l][c] == j1[i]) {
                    v1++;
                } 
                
                if(t[l][c] == j2[i]) {
                    v2++;
                }
            }
        }
    }
    
    if(v1 == 0 || v2 == 0) {
        *v = true;
    }
}
